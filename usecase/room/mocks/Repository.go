// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/vsantosalmeida/browser-chat/entity"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: e
func (_m *Repository) CreateMessage(e *entity.Message) error {
	ret := _m.Called(e)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Message) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRoom provides a mock function with given fields: e
func (_m *Repository) CreateRoom(e *entity.Room) (int, error) {
	ret := _m.Called(e)

	var r0 int
	if rf, ok := ret.Get(0).(func(*entity.Room) int); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Room) error); ok {
		r1 = rf(e)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMessages provides a mock function with given fields: roomID
func (_m *Repository) ListMessages(roomID int) ([]*entity.Message, error) {
	ret := _m.Called(roomID)

	var r0 []*entity.Message
	if rf, ok := ret.Get(0).(func(int) []*entity.Message); ok {
		r0 = rf(roomID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(roomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRooms provides a mock function with given fields:
func (_m *Repository) ListRooms() ([]*entity.Room, error) {
	ret := _m.Called()

	var r0 []*entity.Room
	if rf, ok := ret.Get(0).(func() []*entity.Room); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Room)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
