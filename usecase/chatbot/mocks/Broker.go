// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Broker is an autogenerated mock type for the Broker type
type Broker struct {
	mock.Mock
}

// ReadMessage provides a mock function with given fields: ctx, msgCH
func (_m *Broker) ReadMessage(ctx context.Context, msgCH chan<- []byte) {
	_m.Called(ctx, msgCH)
}

// WriteMessage provides a mock function with given fields: ctx, payload
func (_m *Broker) WriteMessage(ctx context.Context, payload []byte) error {
	ret := _m.Called(ctx, payload)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) error); ok {
		r0 = rf(ctx, payload)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewBroker interface {
	mock.TestingT
	Cleanup(func())
}

// NewBroker creates a new instance of Broker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBroker(t mockConstructorTestingTNewBroker) *Broker {
	mock := &Broker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
